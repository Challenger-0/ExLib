<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TM4C123G_Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TM4C123G_Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Jul 24 22:23:12 2023
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ExLib::mainTask(void*) &rArr; ExLib::usr_main() &rArr; drawLogo() &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[63]">__user_initial_stackheap</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[67]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">UARTCharPut</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 114 times from startup_rvmdk.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[34]">_GLOBAL__sub_I_ExLib_Main.cpp</a> from exlib_main.o(.text._GLOBAL__sub_I_ExLib_Main.cpp) referenced from exlib_main.o(.init_array)
 <LI><a href="#[35]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[b]">my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*)</a> from main.o(.text._Z16my_u8x8_byte_i2cP11u8x8_structhhPv) referenced 2 times from main.o(.text._ZN5ExLib8usr_mainEv)
 <LI><a href="#[c]">u8x8_gpio_and_delay_template(u8x8_struct*, unsigned char, unsigned char, void*)</a> from main.o(.text._Z28u8x8_gpio_and_delay_templateP11u8x8_structhhPv) referenced 2 times from main.o(.text._ZN5ExLib8usr_mainEv)
 <LI><a href="#[25]">ExLib::ReadStream::avaliableForRead()</a> from exlib_readstream.o(.text._ZN5ExLib10ReadStream16avaliableForReadEv) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[1f]">ExLib::ReadStream::read(char*, unsigned int)</a> from exlib_readstream.o(.text._ZN5ExLib10ReadStream4readEPcj) referenced from exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
 <LI><a href="#[1f]">ExLib::ReadStream::read(char*, unsigned int)</a> from exlib_readstream.o(.text._ZN5ExLib10ReadStream4readEPcj) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[1f]">ExLib::ReadStream::read(char*, unsigned int)</a> from exlib_readstream.o(.text._ZN5ExLib10ReadStream4readEPcj) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[20]">ExLib::ReadStream::readUntil(char*, char)</a> from exlib_readstream.o(.text._ZN5ExLib10ReadStream9readUntilEPcc) referenced from exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
 <LI><a href="#[20]">ExLib::ReadStream::readUntil(char*, char)</a> from exlib_readstream.o(.text._ZN5ExLib10ReadStream9readUntilEPcc) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[20]">ExLib::ReadStream::readUntil(char*, char)</a> from exlib_readstream.o(.text._ZN5ExLib10ReadStream9readUntilEPcc) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[15]">ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)</a> from exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWM18registerPWMChannelEjNS_8GPIO_PinE) referenced from exlib_hardwarepwm.o(.rodata._ZTVN5ExLib11HardwarePWME)
 <LI><a href="#[16]">ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent)</a> from exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWM7setDutyEjNS_7PrecentE) referenced from exlib_hardwarepwm.o(.rodata._ZTVN5ExLib11HardwarePWME)
 <LI><a href="#[17]">ExLib::HardwarePWM::setCycle(ExLib::TimeInterval)</a> from exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWM8setCycleENS_12TimeIntervalE) referenced from exlib_hardwarepwm.o(.rodata._ZTVN5ExLib11HardwarePWME)
 <LI><a href="#[1d]">ExLib::PrintStream::~PrintStream__deallocating()</a> from exlib_uart.o(.text._ZN5ExLib11PrintStreamD0Ev) referenced from exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
 <LI><a href="#[1c]">ExLib::PrintStream::~PrintStream__sub_object()</a> from exlib_uart.o(.text._ZN5ExLib11PrintStreamD2Ev) referenced from exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
 <LI><a href="#[1a]">ExLib::WriteStream::writeUntil(char const*, char)</a> from exlib_writestream.o(.text._ZN5ExLib11WriteStream10writeUntilEPKcc) referenced from exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
 <LI><a href="#[1a]">ExLib::WriteStream::writeUntil(char const*, char)</a> from exlib_writestream.o(.text._ZN5ExLib11WriteStream10writeUntilEPKcc) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[1a]">ExLib::WriteStream::writeUntil(char const*, char)</a> from exlib_writestream.o(.text._ZN5ExLib11WriteStream10writeUntilEPKcc) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[1b]">ExLib::WriteStream::avaliableForWrite()</a> from exlib_uart.o(.text._ZN5ExLib11WriteStream17avaliableForWriteEv) referenced from exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
 <LI><a href="#[1b]">ExLib::WriteStream::avaliableForWrite()</a> from exlib_uart.o(.text._ZN5ExLib11WriteStream17avaliableForWriteEv) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[1b]">ExLib::WriteStream::avaliableForWrite()</a> from exlib_uart.o(.text._ZN5ExLib11WriteStream17avaliableForWriteEv) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[19]">ExLib::WriteStream::write(char const*, unsigned int)</a> from exlib_writestream.o(.text._ZN5ExLib11WriteStream5writeEPKcj) referenced from exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
 <LI><a href="#[19]">ExLib::WriteStream::write(char const*, unsigned int)</a> from exlib_writestream.o(.text._ZN5ExLib11WriteStream5writeEPKcj) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[19]">ExLib::WriteStream::write(char const*, unsigned int)</a> from exlib_writestream.o(.text._ZN5ExLib11WriteStream5writeEPKcj) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[21]">ExLib::ReadStreamBuffered::avaliableForRead()</a> from exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBuffered16avaliableForReadEv) referenced from exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
 <LI><a href="#[21]">ExLib::ReadStreamBuffered::avaliableForRead()</a> from exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBuffered16avaliableForReadEv) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[1e]">ExLib::ReadStreamBuffered::read(char&)</a> from exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBuffered4readERc) referenced from exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
 <LI><a href="#[1e]">ExLib::ReadStreamBuffered::read(char&)</a> from exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBuffered4readERc) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[23]">ExLib::I2C::read(char&)</a> from exlib_i2c.o(.text._ZN5ExLib3I2C4readERc) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[22]">ExLib::I2C::write(char)</a> from exlib_i2c.o(.text._ZN5ExLib3I2C5writeEc) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[5]">ExLib::Task::~Task()</a> from exlib_freertos.o(.text._ZN5ExLib4TaskD2Ev) referenced 2 times from exlib_main.o(.text._GLOBAL__sub_I_ExLib_Main.cpp)
 <LI><a href="#[29]">ExLib::UART::UART0InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART0InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[2a]">ExLib::UART::UART1InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART1InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[2b]">ExLib::UART::UART2InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART2InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[2c]">ExLib::UART::UART3InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART3InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[2d]">ExLib::UART::UART4InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART4InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[2e]">ExLib::UART::UART5InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART5InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[2f]">ExLib::UART::UART6InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART6InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[30]">ExLib::UART::UART7InterruptHandler()</a> from exlib_uart.o(.text._ZN5ExLib4UART21UART7InterruptHandlerEv) referenced from exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
 <LI><a href="#[26]">ExLib::UART::write(char)</a> from exlib_uart.o(.text._ZN5ExLib4UART5writeEc) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[28]">ExLib::UART::~UART__deallocating()</a> from exlib_uart.o(.text._ZN5ExLib4UARTD0Ev) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[6]">ExLib::UART::~UART()</a> from exlib_uart.o(.text._ZN5ExLib4UARTD2Ev) referenced 2 times from main.o(.text._GLOBAL__sub_I_main.cpp)
 <LI><a href="#[27]">ExLib::UART::~UART__sub_object()</a> from exlib_uart.o(.text._ZN5ExLib4UARTD2Ev) referenced from exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
 <LI><a href="#[4]">ExLib::mainTask(void*)</a> from exlib_main.o(.text._ZN5ExLib8mainTaskEPv) referenced 2 times from exlib_main.o(.text._GLOBAL__sub_I_ExLib_Main.cpp)
 <LI><a href="#[7]">ExLib::Exception::hardFaultHandler()</a> from exlib_exception.o(.text._ZN5ExLib9Exception16hardFaultHandlerEv) referenced 2 times from exlib_system.o(.text._ZN5ExLib6System4initEv)
 <LI><a href="#[24]">non-virtual thunk to ExLib::I2C::read(char&)</a> from exlib_i2c.o(.text._ZThn4_N5ExLib3I2C4readERc) referenced from exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
 <LI><a href="#[18]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
 <LI><a href="#[13]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[d]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[14]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[33]">u8g2_draw_l90_r0</a> from u8g2_setup.o(.text.u8g2_draw_l90_r0) referenced from u8g2_setup.o(.rodata.u8g2_cb_r0)
 <LI><a href="#[f]">u8g2_font_calc_vref_font</a> from u8g2_font.o(.text.u8g2_font_calc_vref_font) referenced 2 times from u8g2_font.o(.text.u8g2_SetFontPosBaseline)
 <LI><a href="#[12]">u8g2_ll_hvline_vertical_top_lsb</a> from u8g2_ll_hvline.o(.text.u8g2_ll_hvline_vertical_top_lsb) referenced 2 times from u8g2_d_setup.o(.text.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
 <LI><a href="#[31]">u8g2_update_dimension_r0</a> from u8g2_setup.o(.text.u8g2_update_dimension_r0) referenced from u8g2_setup.o(.rodata.u8g2_cb_r0)
 <LI><a href="#[32]">u8g2_update_page_win_r0</a> from u8g2_setup.o(.text.u8g2_update_page_win_r0) referenced from u8g2_setup.o(.rodata.u8g2_cb_r0)
 <LI><a href="#[e]">u8x8_ascii_next</a> from u8x8_8x8.o(.text.u8x8_ascii_next) referenced 2 times from u8g2_font.o(.text.u8g2_DrawStr)
 <LI><a href="#[11]">u8x8_cad_ssd13xx_fast_i2c</a> from u8x8_cad.o(.text.u8x8_cad_ssd13xx_fast_i2c) referenced 2 times from u8g2_d_setup.o(.text.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
 <LI><a href="#[10]">u8x8_d_ssd1306_128x64_noname</a> from u8x8_d_ssd1306_128x64_noname.o(.text.u8x8_d_ssd1306_128x64_noname) referenced 2 times from u8g2_d_setup.o(.text.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
 <LI><a href="#[8]">vPortSVCHandler</a> from port.o(.text.vPortSVCHandler) referenced 2 times from exlib_system.o(.text._ZN5ExLib6System4initEv)
 <LI><a href="#[9]">xPortPendSVHandler</a> from port.o(.text.xPortPendSVHandler) referenced 2 times from exlib_system.o(.text._ZN5ExLib6System4initEv)
 <LI><a href="#[a]">xPortSysTickHandler</a> from port.o(.text.xPortSysTickHandler) referenced 2 times from exlib_system.o(.text._ZN5ExLib6System4initEv)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[142]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[143]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[144]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[145]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[46]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[3e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[146]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[147]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[148]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[149]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[40]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[14c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[150]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[151]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[152]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[153]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[154]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[155]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[156]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[157]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[158]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[159]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[4b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[41]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[15b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[15c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[15d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[15e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[15f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[160]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[161]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[162]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[43]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[45]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[163]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[47]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[164]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[64]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[165]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[63]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[51]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent)
</UL>

<P><STRONG><a name="[166]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ExLib_Main.cpp
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[54]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[167]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[168]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[16c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[4f]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[16f]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[59]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5b]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[173]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[177]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[178]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[58]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[179]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[5d]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[5a]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[17a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[49]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[60]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[5f]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[61]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[65]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[66]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[98]"></a>GPIODirModeSet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text.GPIODirModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[99]"></a>GPIOPadConfigSet</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, gpio.o(.text.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[97]"></a>GPIOPinConfigure</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gpio.o(.text.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[bd]"></a>GPIOUnlockPin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text.GPIOUnlockPin))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[bf]"></a>I2CMasterBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text.I2CMasterBusy))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::endTransmission()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::read(char&)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::write(char)
</UL>

<P><STRONG><a name="[be]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::endTransmission()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::read(char&)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::write(char)
</UL>

<P><STRONG><a name="[c1]"></a>I2CMasterDataGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text.I2CMasterDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::read(char&)
</UL>

<P><STRONG><a name="[c5]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::write(char)
</UL>

<P><STRONG><a name="[c2]"></a>I2CMasterErr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2c.o(.text.I2CMasterErr))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::read(char&)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::write(char)
</UL>

<P><STRONG><a name="[c4]"></a>I2CMasterInitExpClk</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, i2c.o(.text.I2CMasterInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
</UL>

<P><STRONG><a name="[c0]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::read(char&)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::write(char)
</UL>

<P><STRONG><a name="[6a]"></a>IntEnable</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, interrupt.o(.text.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[69]"></a>IntRegister</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, interrupt.o(.text.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::System::init()
</UL>

<P><STRONG><a name="[8d]"></a>PWMGenConfigure</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pwm.o(.text.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)
</UL>

<P><STRONG><a name="[8e]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)
</UL>

<P><STRONG><a name="[84]"></a>PWMGenPeriodGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(.text.PWMGenPeriodGet))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent)
</UL>

<P><STRONG><a name="[88]"></a>PWMGenPeriodSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::setCycle(ExLib::TimeInterval)
</UL>

<P><STRONG><a name="[81]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(.text.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[86]"></a>PWMPulseWidthSet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(.text.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent)
</UL>

<P><STRONG><a name="[a8]"></a>QEIConfigure</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qei.o(.text.QEIConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
</UL>

<P><STRONG><a name="[ab]"></a>QEIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qei.o(.text.QEIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
</UL>

<P><STRONG><a name="[a3]"></a>QEIPositionGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qei.o(.text.QEIPositionGet))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::getCounter()
</UL>

<P><STRONG><a name="[a9]"></a>QEIVelocityConfigure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qei.o(.text.QEIVelocityConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
</UL>

<P><STRONG><a name="[aa]"></a>QEIVelocityEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qei.o(.text.QEIVelocityEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
</UL>

<P><STRONG><a name="[87]"></a>SysCtlClockGet</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, sysctl.o(.text.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::System::getSystemClockSpeed()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::setCycle(ExLib::TimeInterval)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[e1]"></a>SysCtlClockSet</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, sysctl.o(.text.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::System::init()
</UL>

<P><STRONG><a name="[8b]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl.o(.text.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)
</UL>

<P><STRONG><a name="[a0]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctl.o(.text.SysCtlPeripheralDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderClock(ExLib::QuadraticEncoder_Periph, bool)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CClock(ExLib::I2C_Periph, bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTState(unsigned int, bool)
</UL>

<P><STRONG><a name="[9e]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctl.o(.text.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderClock(ExLib::QuadraticEncoder_Periph, bool)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableHWPWMClock(ExLib::HardwarePWM_Periph)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CClock(ExLib::I2C_Periph, bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTState(unsigned int, bool)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableGPIOClock(unsigned int)
</UL>

<P><STRONG><a name="[9f]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sysctl.o(.text.SysCtlPeripheralReady))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderClock(ExLib::QuadraticEncoder_Periph, bool)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableHWPWMClock(ExLib::HardwarePWM_Periph)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CClock(ExLib::I2C_Periph, bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTState(unsigned int, bool)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableGPIOClock(unsigned int)
</UL>

<P><STRONG><a name="[cf]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text.UARTCharGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>

<P><STRONG><a name="[67]"></a>UARTCharPut</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::write(char)
</UL>

<P><STRONG><a name="[ce]"></a>UARTCharsAvail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>

<P><STRONG><a name="[d2]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[d3]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, uart.o(.text.UARTConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[d7]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[d5]"></a>UARTFIFOEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text.UARTFIFOEnable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[d4]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text.UARTFIFOLevelSet))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[cd]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>

<P><STRONG><a name="[d6]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[68]"></a>UARTIntRegister</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart.o(.text.UARTIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[cc]"></a>UARTIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>

<P><STRONG><a name="[b]"></a>my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*)</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(.text._Z16my_u8x8_byte_i2cP11u8x8_structhhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*) &rArr; ExLib::I2C::begin(ExLib::Frequency, unsigned char) &rArr; ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::endTransmission()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::beginTransmission(unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::operator"" _kHz(unsigned long long)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::WriteStream::write(char const*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._ZN5ExLib8usr_mainEv)
</UL>
<P><STRONG><a name="[c]"></a>u8x8_gpio_and_delay_template(u8x8_struct*, unsigned char, unsigned char, void*)</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, main.o(.text._Z28u8x8_gpio_and_delay_templateP11u8x8_structhhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = u8x8_gpio_and_delay_template(u8x8_struct*, unsigned char, unsigned char, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._ZN5ExLib8usr_mainEv)
</UL>
<P><STRONG><a name="[75]"></a>drawURL()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text._Z7drawURLv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = drawURL() &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[78]"></a>drawLogo()</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, main.o(.text._Z8drawLogov))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drawLogo() &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawVLine
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHLine
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFontDirection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFontMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[d0]"></a>ExLib::BufferFIFO&lang;char&rang;::write(char)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, exlib_uart.o(.text._ZN5ExLib10BufferFIFOIcE5writeEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>

<P><STRONG><a name="[25]"></a>ExLib::ReadStream::avaliableForRead()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exlib_readstream.o(.text._ZN5ExLib10ReadStream16avaliableForReadEv))
<BR>[Address Reference Count : 1]<UL><LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
</UL>
<P><STRONG><a name="[1f]"></a>ExLib::ReadStream::read(char*, unsigned int)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, exlib_readstream.o(.text._ZN5ExLib10ReadStream4readEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::ReadStream::read(char*, unsigned int)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
<LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
<LI> exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
</UL>
<P><STRONG><a name="[20]"></a>ExLib::ReadStream::readUntil(char*, char)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, exlib_readstream.o(.text._ZN5ExLib10ReadStream9readUntilEPcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::ReadStream::readUntil(char*, char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
<LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
<LI> exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
</UL>
<P><STRONG><a name="[15]"></a>ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWM18registerPWMChannelEjNS_8GPIO_PinE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin) &rArr; ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMOutputBitByNameAndChannel(ExLib::HardwarePWM_Periph, unsigned int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMNameByModuleAndGenerator(unsigned int, unsigned int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::isLegalHWPWMPin(unsigned int, unsigned int, unsigned int, ExLib::GPIO_Pin)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_hardwarepwm.o(.rodata._ZTVN5ExLib11HardwarePWME)
</UL>
<P><STRONG><a name="[16]"></a>ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWM7setDutyEjNS_7PrecentE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodGet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMOutputByNameAndChannel(ExLib::HardwarePWM_Periph, unsigned int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMNameByModuleAndGenerator(unsigned int, unsigned int)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_hardwarepwm.o(.rodata._ZTVN5ExLib11HardwarePWME)
</UL>
<P><STRONG><a name="[17]"></a>ExLib::HardwarePWM::setCycle(ExLib::TimeInterval)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWM8setCycleENS_12TimeIntervalE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExLib::HardwarePWM::setCycle(ExLib::TimeInterval) &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_hardwarepwm.o(.rodata._ZTVN5ExLib11HardwarePWME)
</UL>
<P><STRONG><a name="[6f]"></a>ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWMC2ENS_18HardwarePWM_PeriphENS_12TimeIntervalE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval) &rArr; ExLib::enableHWPWMClock(ExLib::HardwarePWM_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableHWPWMClock(ExLib::HardwarePWM_Periph)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMGeneratorByName(ExLib::HardwarePWM_Periph)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMModuleByName(ExLib::HardwarePWM_Periph)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[17d]"></a>ExLib::HardwarePWM::HardwarePWM__sub_object(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, exlib_hardwarepwm.o(.text._ZN5ExLib11HardwarePWMC2ENS_18HardwarePWM_PeriphENS_12TimeIntervalE), UNUSED)

<P><STRONG><a name="[70]"></a>ExLib::PWM_Channel::PWM_Channel(ExLib::PWM_Generator&, unsigned int, ExLib::GPIO_Pin)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, exlib_pwm.o(.text._ZN5ExLib11PWM_ChannelC2ERNS_13PWM_GeneratorEjNS_8GPIO_PinE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::PWM_Channel::PWM_Channel(ExLib::PWM_Generator&, unsigned int, ExLib::GPIO_Pin)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[17e]"></a>ExLib::PWM_Channel::PWM_Channel__sub_object(ExLib::PWM_Generator&, unsigned int, ExLib::GPIO_Pin)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, exlib_pwm.o(.text._ZN5ExLib11PWM_ChannelC2ERNS_13PWM_GeneratorEjNS_8GPIO_PinE), UNUSED)

<P><STRONG><a name="[8f]"></a>unsigned int ExLib::PrintStream::printInteger&lang;int&rang;(int, unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 36 bytes, main.o(.text._ZN5ExLib11PrintStream12printIntegerIiEEjT_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unsigned int ExLib::PrintStream::printInteger&lang;int&rang;(int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::PrintStream::getNumberCharInBase(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[91]"></a>unsigned int ExLib::PrintStream::printInteger&lang;unsigned int&rang;(unsigned int, unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 36 bytes, main.o(.text._ZN5ExLib11PrintStream12printIntegerIjEEjT_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unsigned int ExLib::PrintStream::printInteger&lang;unsigned int&rang;(unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::PrintStream::getNumberCharInBase(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[90]"></a>ExLib::PrintStream::getNumberCharInBase(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, exlib_printstream.o(.text._ZN5ExLib11PrintStream19getNumberCharInBaseEhh))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned int ExLib::PrintStream::printInteger&lang;int&rang;(int, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned int ExLib::PrintStream::printInteger&lang;unsigned int&rang;(unsigned int, unsigned char)
</UL>

<P><STRONG><a name="[1d]"></a>ExLib::PrintStream::~PrintStream__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib11PrintStreamD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
</UL>
<P><STRONG><a name="[1c]"></a>ExLib::PrintStream::~PrintStream__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib11PrintStreamD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
</UL>
<P><STRONG><a name="[1a]"></a>ExLib::WriteStream::writeUntil(char const*, char)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, exlib_writestream.o(.text._ZN5ExLib11WriteStream10writeUntilEPKcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::WriteStream::writeUntil(char const*, char)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
<LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
<LI> exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
</UL>
<P><STRONG><a name="[1b]"></a>ExLib::WriteStream::avaliableForWrite()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib11WriteStream17avaliableForWriteEv))
<BR>[Address Reference Count : 3]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
<LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
<LI> exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
</UL>
<P><STRONG><a name="[19]"></a>ExLib::WriteStream::write(char const*, unsigned int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, exlib_writestream.o(.text._ZN5ExLib11WriteStream5writeEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::WriteStream::write(char const*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
<LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
<LI> exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
</UL>
<P><STRONG><a name="[92]"></a>ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, util_i2c.o(.text._ZN5ExLib12configI2CPinEjNS_8GPIO_PinES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CPinMuxConfig(unsigned int, ExLib::GPIO_Pin)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableGPIOClock(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPinByName(ExLib::GPIO_Pin)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPortByName(ExLib::GPIO_Pin)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
</UL>

<P><STRONG><a name="[9a]"></a>ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, util_uart.o(.text._ZN5ExLib13configUARTPinEjNS_8GPIO_PinES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTPinMuxConfig(unsigned int, ExLib::GPIO_Pin)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableGPIOClock(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPinByName(ExLib::GPIO_Pin)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPortByName(ExLib::GPIO_Pin)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[c7]"></a>ExLib::isLegalI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, util_i2c.o(.text._ZN5ExLib13isLegalI2CPinEjNS_8GPIO_PinES0_))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[7f]"></a>ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, util_hardwarepwm.o(.text._ZN5ExLib14configHWPWMPinENS_18HardwarePWM_PeriphENS_8GPIO_PinE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMPinMuxConfig(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableGPIOClock(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPinByName(ExLib::GPIO_Pin)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPortByName(ExLib::GPIO_Pin)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[9d]"></a>ExLib::configI2CClock(ExLib::I2C_Periph, bool)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, util_i2c.o(.text._ZN5ExLib14configI2CClockENS_10I2C_PeriphEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::configI2CClock(ExLib::I2C_Periph, bool) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
</UL>

<P><STRONG><a name="[d9]"></a>ExLib::isLegalUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, util_uart.o(.text._ZN5ExLib14isLegalUARTPinEjNS_8GPIO_PinES0_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[a1]"></a>ExLib::configUARTState(unsigned int, bool)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib15configUARTStateEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::configUARTState(unsigned int, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[95]"></a>ExLib::enableGPIOClock(unsigned int)</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, util_gpio.o(.text._ZN5ExLib15enableGPIOClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::enableGPIOClock(unsigned int) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[7d]"></a>ExLib::isLegalHWPWMPin(unsigned int, unsigned int, unsigned int, ExLib::GPIO_Pin)</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, util_hardwarepwm.o(.text._ZN5ExLib15isLegalHWPWMPinEjjjNS_8GPIO_PinE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[a2]"></a>ExLib::QuadraticEncoder::getCounter()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exlib_quadraticencoder.o(.text._ZN5ExLib16QuadraticEncoder10getCounterEv))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIPositionGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[a4]"></a>ExLib::QuadraticEncoder::begin()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, exlib_quadraticencoder.o(.text._ZN5ExLib16QuadraticEncoder5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ExLib::QuadraticEncoder::begin() &rArr; ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityConfigure
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityEnable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIConfigure
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIEnable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderClock(ExLib::QuadraticEncoder_Periph, bool)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getQuadraticEncoderNameByPeriph(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[ac]"></a>ExLib::QuadraticEncoder::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, exlib_quadraticencoder.o(.text._ZN5ExLib16QuadraticEncoder7setPinsENS_8GPIO_PinES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExLib::QuadraticEncoder::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::isLegalQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::QuadraticEncoder(ExLib::QuadraticEncoder_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[ae]"></a>ExLib::QuadraticEncoder::QuadraticEncoder(ExLib::QuadraticEncoder_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, exlib_quadraticencoder.o(.text._ZN5ExLib16QuadraticEncoderC2ENS_23QuadraticEncoder_PeriphENS_8GPIO_PinES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ExLib::QuadraticEncoder::QuadraticEncoder(ExLib::QuadraticEncoder_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; ExLib::QuadraticEncoder::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getQuadraticEncoderPeriphByName(ExLib::QuadraticEncoder_Periph)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[17f]"></a>ExLib::QuadraticEncoder::QuadraticEncoder__sub_object(ExLib::QuadraticEncoder_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, exlib_quadraticencoder.o(.text._ZN5ExLib16QuadraticEncoderC2ENS_23QuadraticEncoder_PeriphENS_8GPIO_PinES2_), UNUSED)

<P><STRONG><a name="[8c]"></a>ExLib::enableHWPWMClock(ExLib::HardwarePWM_Periph)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, util_hardwarepwm.o(.text._ZN5ExLib16enableHWPWMClockENS_18HardwarePWM_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::enableHWPWMClock(ExLib::HardwarePWM_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)
</UL>

<P><STRONG><a name="[94]"></a>ExLib::getGPIOPinByName(ExLib::GPIO_Pin)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, util_gpio.o(.text._ZN5ExLib16getGPIOPinByNameENS_8GPIO_PinE))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[b0]"></a>ExLib::getUARTIntByName(ExLib::UART_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib16getUARTIntByNameENS_11UART_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getUARTIntByName(ExLib::UART_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[93]"></a>ExLib::getGPIOPortByName(ExLib::GPIO_Pin)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, util_gpio.o(.text._ZN5ExLib17getGPIOPortByNameENS_8GPIO_PinE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getGPIOPortByName(ExLib::GPIO_Pin) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[21]"></a>ExLib::ReadStreamBuffered::avaliableForRead()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBuffered16avaliableForReadEv))
<BR>[Address Reference Count : 2]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
<LI> exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
</UL>
<P><STRONG><a name="[1e]"></a>ExLib::ReadStreamBuffered::read(char&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBuffered4readERc))
<BR>[Address Reference Count : 2]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
<LI> exlib_readstreambuffered.o(.rodata._ZTVN5ExLib18ReadStreamBufferedE)
</UL>
<P><STRONG><a name="[180]"></a>ExLib::ReadStreamBuffered::ReadStreamBuffered(ExLib::BufferFIFO&lang;char&rang;&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBufferedC2ERNS_10BufferFIFOIcEE), UNUSED)

<P><STRONG><a name="[dc]"></a>ExLib::ReadStreamBuffered::ReadStreamBuffered__sub_object(ExLib::BufferFIFO&lang;char&rang;&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, exlib_readstreambuffered.o(.text._ZN5ExLib18ReadStreamBufferedC2ERNS_10BufferFIFOIcEE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
</UL>

<P><STRONG><a name="[b1]"></a>ExLib::getI2CNameByPeriph(unsigned int)</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, util_i2c.o(.text._ZN5ExLib18getI2CNameByPeriphEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getI2CNameByPeriph(unsigned int) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
</UL>

<P><STRONG><a name="[b2]"></a>ExLib::getI2CPeriphByName(ExLib::I2C_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_i2c.o(.text._ZN5ExLib18getI2CPeriphByNameENS_10I2C_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getI2CPeriphByName(ExLib::I2C_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::I2C(ExLib::I2C_Periph)
</UL>

<P><STRONG><a name="[96]"></a>ExLib::getI2CPinMuxConfig(unsigned int, ExLib::GPIO_Pin)</STRONG> (Thumb, 600 bytes, Stack size 0 bytes, util_i2c.o(.text._ZN5ExLib18getI2CPinMuxConfigEjNS_8GPIO_PinE))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[b3]"></a>ExLib::getI2CDefaultSCLPin(ExLib::I2C_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_i2c.o(.text._ZN5ExLib19getI2CDefaultSCLPinENS_10I2C_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getI2CDefaultSCLPin(ExLib::I2C_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::I2C(ExLib::I2C_Periph)
</UL>

<P><STRONG><a name="[b4]"></a>ExLib::getI2CDefaultSDAPin(ExLib::I2C_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_i2c.o(.text._ZN5ExLib19getI2CDefaultSDAPinENS_10I2C_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getI2CDefaultSDAPin(ExLib::I2C_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::I2C(ExLib::I2C_Periph)
</UL>

<P><STRONG><a name="[b5]"></a>ExLib::getUARTDefaultRxPin(ExLib::UART_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib19getUARTDefaultRxPinENS_11UART_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getUARTDefaultRxPin(ExLib::UART_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::BufferFIFO&lang;char&rang;*)
</UL>

<P><STRONG><a name="[b6]"></a>ExLib::getUARTDefaultTxPin(ExLib::UART_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib19getUARTDefaultTxPinENS_11UART_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getUARTDefaultTxPin(ExLib::UART_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::BufferFIFO&lang;char&rang;*)
</UL>

<P><STRONG><a name="[b7]"></a>ExLib::getUARTNameByPeriph(unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib19getUARTNameByPeriphEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getUARTNameByPeriph(unsigned int) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::~UART()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::~UART__deallocating()
</UL>

<P><STRONG><a name="[b8]"></a>ExLib::getUARTParityByName(ExLib::UART_Parity)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib19getUARTParityByNameENS_11UART_ParityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getUARTParityByName(ExLib::UART_Parity) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[b9]"></a>ExLib::getUARTPeriphByName(ExLib::UART_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib19getUARTPeriphByNameENS_11UART_PeriphE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
</UL>

<P><STRONG><a name="[9b]"></a>ExLib::getUARTPinMuxConfig(unsigned int, ExLib::GPIO_Pin)</STRONG> (Thumb, 982 bytes, Stack size 0 bytes, util_uart.o(.text._ZN5ExLib19getUARTPinMuxConfigEjNS_8GPIO_PinE))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[89]"></a>ExLib::getHWPWMModuleByName(ExLib::HardwarePWM_Periph)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, util_hardwarepwm.o(.text._ZN5ExLib20getHWPWMModuleByNameENS_18HardwarePWM_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getHWPWMModuleByName(ExLib::HardwarePWM_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)
</UL>

<P><STRONG><a name="[9c]"></a>ExLib::getHWPWMPinMuxConfig(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)</STRONG> (Thumb, 560 bytes, Stack size 0 bytes, util_hardwarepwm.o(.text._ZN5ExLib20getHWPWMPinMuxConfigENS_18HardwarePWM_PeriphENS_8GPIO_PinE))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configHWPWMPin(ExLib::HardwarePWM_Periph, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[ba]"></a>ExLib::getUARTStopBitsByName(ExLib::UART_StopBits)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib21getUARTStopBitsByNameENS_13UART_StopBitsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getUARTStopBitsByName(ExLib::UART_StopBits) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[8a]"></a>ExLib::getHWPWMGeneratorByName(ExLib::HardwarePWM_Periph)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, util_hardwarepwm.o(.text._ZN5ExLib23getHWPWMGeneratorByNameENS_18HardwarePWM_PeriphE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)
</UL>

<P><STRONG><a name="[bb]"></a>ExLib::getUARTWordLengthByName(ExLib::UART_WordLength)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, util_uart.o(.text._ZN5ExLib23getUARTWordLengthByNameENS_15UART_WordLengthE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getUARTWordLengthByName(ExLib::UART_WordLength) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>

<P><STRONG><a name="[a7]"></a>ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, util_quadraticencoder.o(.text._ZN5ExLib25configQuadraticEncoderPinEjNS_8GPIO_PinES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOUnlockPin
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getQuadraticEncoderPinMuxConfig(unsigned int, ExLib::GPIO_Pin)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableGPIOClock(unsigned int)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPinByName(ExLib::GPIO_Pin)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPortByName(ExLib::GPIO_Pin)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
</UL>

<P><STRONG><a name="[ad]"></a>ExLib::isLegalQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, util_quadraticencoder.o(.text._ZN5ExLib26isLegalQuadraticEncoderPinEjNS_8GPIO_PinES0_))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[a6]"></a>ExLib::configQuadraticEncoderClock(ExLib::QuadraticEncoder_Periph, bool)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, util_quadraticencoder.o(.text._ZN5ExLib27configQuadraticEncoderClockENS_23QuadraticEncoder_PeriphEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExLib::configQuadraticEncoderClock(ExLib::QuadraticEncoder_Periph, bool) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
</UL>

<P><STRONG><a name="[83]"></a>ExLib::getHWPWMOutputByNameAndChannel(ExLib::HardwarePWM_Periph, unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, util_hardwarepwm.o(.text._ZN5ExLib30getHWPWMOutputByNameAndChannelENS_18HardwarePWM_PeriphEj))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent)
</UL>

<P><STRONG><a name="[a5]"></a>ExLib::getQuadraticEncoderNameByPeriph(unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, util_quadraticencoder.o(.text._ZN5ExLib31getQuadraticEncoderNameByPeriphEj))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
</UL>

<P><STRONG><a name="[af]"></a>ExLib::getQuadraticEncoderPeriphByName(ExLib::QuadraticEncoder_Periph)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, util_quadraticencoder.o(.text._ZN5ExLib31getQuadraticEncoderPeriphByNameENS_23QuadraticEncoder_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::getQuadraticEncoderPeriphByName(ExLib::QuadraticEncoder_Periph) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::QuadraticEncoder(ExLib::QuadraticEncoder_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[bc]"></a>ExLib::getQuadraticEncoderPinMuxConfig(unsigned int, ExLib::GPIO_Pin)</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, util_quadraticencoder.o(.text._ZN5ExLib31getQuadraticEncoderPinMuxConfigEjNS_8GPIO_PinE))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[7e]"></a>ExLib::getHWPWMNameByModuleAndGenerator(unsigned int, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, util_hardwarepwm.o(.text._ZN5ExLib32getHWPWMNameByModuleAndGeneratorEjj))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::setDuty(unsigned int, ExLib::Precent)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[80]"></a>ExLib::getHWPWMOutputBitByNameAndChannel(ExLib::HardwarePWM_Periph, unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, util_hardwarepwm.o(.text._ZN5ExLib33getHWPWMOutputBitByNameAndChannelENS_18HardwarePWM_PeriphEj))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[74]"></a>ExLib::I2C::endTransmission()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, exlib_i2c.o(.text._ZN5ExLib3I2C15endTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::I2C::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*)
</UL>

<P><STRONG><a name="[73]"></a>ExLib::I2C::beginTransmission(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exlib_i2c.o(.text._ZN5ExLib3I2C17beginTransmissionEh))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*)
</UL>

<P><STRONG><a name="[23]"></a>ExLib::I2C::read(char&)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, exlib_i2c.o(.text._ZN5ExLib3I2C4readERc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExLib::I2C::read(char&)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterErr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to ExLib::I2C::read(char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
</UL>
<P><STRONG><a name="[72]"></a>ExLib::I2C::begin(ExLib::Frequency, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, exlib_i2c.o(.text._ZN5ExLib3I2C5beginENS_9FrequencyEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ExLib::I2C::begin(ExLib::Frequency, unsigned char) &rArr; ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CNameByPeriph(unsigned int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CClock(ExLib::I2C_Periph, bool)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::operator"" _MHz(unsigned long long)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::operator"" _kHz(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*)
</UL>

<P><STRONG><a name="[22]"></a>ExLib::I2C::write(char)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, exlib_i2c.o(.text._ZN5ExLib3I2C5writeEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExLib::I2C::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterErr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
</UL>
<P><STRONG><a name="[c6]"></a>ExLib::I2C::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, exlib_i2c.o(.text._ZN5ExLib3I2C7setPinsENS_8GPIO_PinES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExLib::I2C::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::isLegalI2CPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::I2C(ExLib::I2C_Periph)
</UL>

<P><STRONG><a name="[6c]"></a>ExLib::I2C::I2C(ExLib::I2C_Periph)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, exlib_i2c.o(.text._ZN5ExLib3I2CC2ENS_10I2C_PeriphE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ExLib::I2C::I2C(ExLib::I2C_Periph) &rArr; ExLib::I2C::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CDefaultSDAPin(ExLib::I2C_Periph)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CDefaultSCLPin(ExLib::I2C_Periph)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CPeriphByName(ExLib::I2C_Periph)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[181]"></a>ExLib::I2C::I2C__sub_object(ExLib::I2C_Periph)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, exlib_i2c.o(.text._ZN5ExLib3I2CC2ENS_10I2C_PeriphE), UNUSED)

<P><STRONG><a name="[c8]"></a>ExLib::Task::begin(char const*, unsigned int, unsigned int)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, exlib_freertos.o(.text._ZN5ExLib4Task5beginEPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = ExLib::Task::begin(char const*, unsigned int, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>ExLib::Task::Task(void (*)(void*), void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exlib_freertos.o(.text._ZN5ExLib4TaskC2EPFvPvES1_))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ExLib_Main.cpp
</UL>

<P><STRONG><a name="[182]"></a>ExLib::Task::Task__sub_object(void (*)(void*), void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exlib_freertos.o(.text._ZN5ExLib4TaskC2EPFvPvES1_), UNUSED)

<P><STRONG><a name="[5]"></a>ExLib::Task::~Task()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exlib_freertos.o(.text._ZN5ExLib4TaskD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ExLib::Task::~Task() &rArr; vTaskDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_main.o(.text._GLOBAL__sub_I_ExLib_Main.cpp)
</UL>
<P><STRONG><a name="[183]"></a>ExLib::Task::~Task__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exlib_freertos.o(.text._ZN5ExLib4TaskD2Ev), UNUSED)

<P><STRONG><a name="[cb]"></a>ExLib::UART::interruptHandler()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, exlib_uart.o(.text._ZN5ExLib4UART16interruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART7InterruptHandler()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART6InterruptHandler()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART5InterruptHandler()
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART4InterruptHandler()
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART3InterruptHandler()
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART2InterruptHandler()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART1InterruptHandler()
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART0InterruptHandler()
</UL>

<P><STRONG><a name="[29]"></a>ExLib::UART::UART0InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART0InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART0InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[2a]"></a>ExLib::UART::UART1InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART1InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART1InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[2b]"></a>ExLib::UART::UART2InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART2InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART2InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[2c]"></a>ExLib::UART::UART3InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART3InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART3InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[2d]"></a>ExLib::UART::UART4InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART4InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART4InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[2e]"></a>ExLib::UART::UART5InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART5InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART5InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[2f]"></a>ExLib::UART::UART6InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART6InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART6InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[30]"></a>ExLib::UART::UART7InterruptHandler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exlib_uart.o(.text._ZN5ExLib4UART21UART7InterruptHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExLib::UART::UART7InterruptHandler() &rArr; ExLib::UART::interruptHandler() &rArr; ExLib::BufferFIFO&lang;char&rang;::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::interruptHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZZN5ExLib4UART25getInterruptHandlerByNameENS_11UART_PeriphEE24interruptHandlerFunction)
</UL>
<P><STRONG><a name="[d1]"></a>ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, exlib_uart.o(.text._ZN5ExLib4UART5beginEjNS_15UART_WordLengthENS_13UART_StopBitsENS_11UART_ParityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity) &rArr; ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin) &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOEnable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTIntByName(ExLib::UART_Periph)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTState(unsigned int, bool)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTParityByName(ExLib::UART_Parity)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTStopBitsByName(ExLib::UART_StopBits)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTWordLengthByName(ExLib::UART_WordLength)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTNameByPeriph(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[26]"></a>ExLib::UART::write(char)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, exlib_uart.o(.text._ZN5ExLib4UART5writeEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::UART::write(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
</UL>
<P><STRONG><a name="[d8]"></a>ExLib::UART::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, exlib_uart.o(.text._ZN5ExLib4UART7setPinsENS_8GPIO_PinES1_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::isLegalUARTPin(unsigned int, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
</UL>

<P><STRONG><a name="[da]"></a>ExLib::UART::UART(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, exlib_uart.o(.text._ZN5ExLib4UARTC2ENS_11UART_PeriphENS_8GPIO_PinES2_PNS_10BufferFIFOIcEE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTPeriphByName(ExLib::UART_Periph)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::ReadStreamBuffered::ReadStreamBuffered__sub_object(ExLib::BufferFIFO&lang;char&rang;&)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>

<P><STRONG><a name="[dd]"></a>ExLib::UART::UART__sub_object(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, exlib_uart.o(.text._ZN5ExLib4UARTC2ENS_11UART_PeriphENS_8GPIO_PinES2_PNS_10BufferFIFOIcEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExLib::UART::UART__sub_object(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::BufferFIFO&lang;char&rang;*)
</UL>

<P><STRONG><a name="[6d]"></a>ExLib::UART::UART(ExLib::UART_Periph, ExLib::BufferFIFO&lang;char&rang;*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, exlib_uart.o(.text._ZN5ExLib4UARTC2ENS_11UART_PeriphEPNS_10BufferFIFOIcEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ExLib::UART::UART(ExLib::UART_Periph, ExLib::BufferFIFO&lang;char&rang;*) &rArr; ExLib::UART::UART__sub_object(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART__sub_object(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTDefaultTxPin(ExLib::UART_Periph)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTDefaultRxPin(ExLib::UART_Periph)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[184]"></a>ExLib::UART::UART__sub_object(ExLib::UART_Periph, ExLib::BufferFIFO&lang;char&rang;*)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, exlib_uart.o(.text._ZN5ExLib4UARTC2ENS_11UART_PeriphEPNS_10BufferFIFOIcEE), UNUSED)

<P><STRONG><a name="[28]"></a>ExLib::UART::~UART__deallocating()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, exlib_uart.o(.text._ZN5ExLib4UARTD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExLib::UART::~UART__deallocating() &rArr; ExLib::getUARTNameByPeriph(unsigned int) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTNameByPeriph(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
</UL>
<P><STRONG><a name="[6]"></a>ExLib::UART::~UART()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, exlib_uart.o(.text._ZN5ExLib4UARTD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExLib::UART::~UART() &rArr; ExLib::getUARTNameByPeriph(unsigned int) &rArr; ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTNameByPeriph(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._GLOBAL__sub_I_main.cpp)
</UL>
<P><STRONG><a name="[27]"></a>ExLib::UART::~UART__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, exlib_uart.o(.text._ZN5ExLib4UARTD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::UART::~UART__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib4UARTE)
</UL>
<P><STRONG><a name="[e9]"></a>ExLib::System::printExLibLOGO()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, exlib_system.o(.text._ZN5ExLib6System14printExLibLOGOEv))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>

<P><STRONG><a name="[e3]"></a>ExLib::System::setDebugStream(ExLib::PrintStream&)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, exlib_system.o(.text._ZN5ExLib6System14setDebugStreamERNS_11PrintStreamE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::System::setDebugStream(ExLib::PrintStream&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[df]"></a>ExLib::System::getSystemClockSpeed()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exlib_system.o(.text._ZN5ExLib6System19getSystemClockSpeedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExLib::System::getSystemClockSpeed() &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[e0]"></a>ExLib::System::init()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, exlib_system.o(.text._ZN5ExLib6System4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExLib::System::init() &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>ExLib::mainTask(void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exlib_main.o(.text._ZN5ExLib8mainTaskEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ExLib::mainTask(void*) &rArr; ExLib::usr_main() &rArr; drawLogo() &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_main.o(.text._GLOBAL__sub_I_ExLib_Main.cpp)
</UL>
<P><STRONG><a name="[e2]"></a>ExLib::usr_main()</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, main.o(.text._ZN5ExLib8usr_mainEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ExLib::usr_main() &rArr; drawLogo() &rArr; u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned int ExLib::PrintStream::printInteger&lang;int&rang;(int, unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_ClearBuffer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_SetPowerSave
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_InitDisplay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned int ExLib::PrintStream::printInteger&lang;unsigned int&rang;(unsigned int, unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawURL()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLogo()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::QuadraticEncoder(ExLib::QuadraticEncoder_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::getCounter()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::begin()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::System::getSystemClockSpeed()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::System::setDebugStream(ExLib::PrintStream&)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::begin(unsigned int, ExLib::UART_WordLength, ExLib::UART_StopBits, ExLib::UART_Parity)
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::mainTask(void*)
</UL>

<P><STRONG><a name="[82]"></a>ExLib::Exception::raiseException(char const*)</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, exlib_exception.o(.text._ZN5ExLib9Exception14raiseExceptionEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExLib::Exception::raiseException(char const*) &rArr; ExLib::Exception::raiseHardFault()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseHardFault()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::System::printExLibLOGO()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configQuadraticEncoderClock(ExLib::QuadraticEncoder_Periph, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::QuadraticEncoder::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getQuadraticEncoderPeriphByName(ExLib::QuadraticEncoder_Periph)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableHWPWMClock(ExLib::HardwarePWM_Periph)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getHWPWMModuleByName(ExLib::HardwarePWM_Periph)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::registerPWMChannel(unsigned int, ExLib::GPIO_Pin)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CNameByPeriph(unsigned int)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::configI2CClock(ExLib::I2C_Periph, bool)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CDefaultSDAPin(ExLib::I2C_Periph)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CDefaultSCLPin(ExLib::I2C_Periph)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getI2CPeriphByName(ExLib::I2C_Periph)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTIntByName(ExLib::UART_Periph)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTParityByName(ExLib::UART_Parity)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTStopBitsByName(ExLib::UART_StopBits)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTWordLengthByName(ExLib::UART_WordLength)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTNameByPeriph(unsigned int)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::setPins(ExLib::GPIO_Pin, ExLib::GPIO_Pin)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTPeriphByName(ExLib::UART_Periph)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTDefaultTxPin(ExLib::UART_Periph)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getUARTDefaultRxPin(ExLib::UART_Periph)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::mainTask(void*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::enableGPIOClock(unsigned int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::getGPIOPortByName(ExLib::GPIO_Pin)
</UL>

<P><STRONG><a name="[ea]"></a>ExLib::Exception::raiseHardFault()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, exlib_exception.o(.text._ZN5ExLib9Exception14raiseHardFaultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExLib::Exception::raiseHardFault()
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>

<P><STRONG><a name="[7]"></a>ExLib::Exception::hardFaultHandler()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, exlib_exception.o(.text._ZN5ExLib9Exception16hardFaultHandlerEv))
<BR>[Address Reference Count : 1]<UL><LI> exlib_system.o(.text._ZN5ExLib6System4initEv)
</UL>
<P><STRONG><a name="[6e]"></a>ExLib::operator"" _ms(unsigned long long)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exlib_units.o(.text._ZN5ExLibli3_msEy))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[c3]"></a>ExLib::operator"" _MHz(unsigned long long)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exlib_units.o(.text._ZN5ExLibli4_MHzEy))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
</UL>

<P><STRONG><a name="[71]"></a>ExLib::operator"" _kHz(unsigned long long)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exlib_units.o(.text._ZN5ExLibli4_kHzEy))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_u8x8_byte_i2c(u8x8_struct*, unsigned char, unsigned char, void*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::begin(ExLib::Frequency, unsigned char)
</UL>

<P><STRONG><a name="[eb]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[24]"></a>non-virtual thunk to ExLib::I2C::read(char&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exlib_i2c.o(.text._ZThn4_N5ExLib3I2C4readERc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = non-virtual thunk to ExLib::I2C::read(char&) &rArr; ExLib::I2C::read(char&)
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::read(char&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_i2c.o(.rodata._ZTVN5ExLib3I2CE)
</UL>
<P><STRONG><a name="[de]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::~UART__deallocating()
</UL>

<P><STRONG><a name="[db]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::GPIO_Pin, ExLib::GPIO_Pin, ExLib::BufferFIFO&lang;char&rang;*)
</UL>

<P><STRONG><a name="[18]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_uart.o(.rodata._ZTVN5ExLib11PrintStreamE)
</UL>
<P><STRONG><a name="[ec]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, exlib_main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Task::begin(char const*, unsigned int, unsigned int)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::System::init()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Exception::raiseException(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[108]"></a>pvPortMalloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, heap_3.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[140]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[e7]"></a>u8g2_ClearBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, u8g2_buffer.o(.text.u8g2_ClearBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = u8g2_ClearBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[10a]"></a>u8g2_DrawGlyph</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, u8g2_font.o(.text.u8g2_DrawGlyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_glyph_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_string
</UL>

<P><STRONG><a name="[7b]"></a>u8g2_DrawHLine</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g2_hvline.o(.text.u8g2_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g2_DrawHLine &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLogo()
</UL>

<P><STRONG><a name="[10d]"></a>u8g2_DrawHVLine</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, u8g2_hvline.o(.text.u8g2_DrawHVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g2_DrawHVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawVLine
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHLine
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
</UL>

<P><STRONG><a name="[77]"></a>u8g2_DrawStr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_DrawStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = u8g2_DrawStr &rArr; u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_string
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawURL()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLogo()
</UL>

<P><STRONG><a name="[7c]"></a>u8g2_DrawVLine</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g2_hvline.o(.text.u8g2_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g2_DrawVLine &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLogo()
</UL>

<P><STRONG><a name="[118]"></a>u8g2_IsIntersection</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, u8g2_intersection.o(.text.u8g2_IsIntersection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g2_IsIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_apply_clip_window
</UL>

<P><STRONG><a name="[e8]"></a>u8g2_SendBuffer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, u8g2_buffer.o(.text.u8g2_SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u8g2_SendBuffer &rArr; u8g2_send_buffer &rArr; u8x8_DrawTile
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_RefreshDisplay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[76]"></a>u8g2_SetFont</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, u8g2_font.o(.text.u8g2_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g2_SetFont &rArr; u8g2_read_font_info
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_UpdateRefHeight
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_read_font_info
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawURL()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLogo()
</UL>

<P><STRONG><a name="[7a]"></a>u8g2_SetFontDirection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_SetFontDirection))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLogo()
</UL>

<P><STRONG><a name="[79]"></a>u8g2_SetFontMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_SetFontMode))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLogo()
</UL>

<P><STRONG><a name="[114]"></a>u8g2_SetFontPosBaseline</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_SetFontPosBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetupBuffer
</UL>

<P><STRONG><a name="[113]"></a>u8g2_SetupBuffer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, u8g2_setup.o(.text.u8g2_SetupBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_SetupBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFontPosBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
</UL>

<P><STRONG><a name="[e4]"></a>u8g2_Setup_ssd1306_i2c_128x64_noname_f</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, u8g2_d_setup.o(.text.u8g2_Setup_ssd1306_i2c_128x64_noname_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8g2_Setup_ssd1306_i2c_128x64_noname_f &rArr; u8g2_SetupBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_m_16_8_f
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetupBuffer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[112]"></a>u8g2_UpdateRefHeight</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_UpdateRefHeight))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
</UL>

<P><STRONG><a name="[11d]"></a>u8g2_add_vector_x</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_add_vector_x))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
</UL>

<P><STRONG><a name="[11e]"></a>u8g2_add_vector_y</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_add_vector_y))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
</UL>

<P><STRONG><a name="[119]"></a>u8g2_draw_hv_line_2dir</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, u8g2_hvline.o(.text.u8g2_draw_hv_line_2dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_draw_hv_line_2dir
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_l90_r0
</UL>

<P><STRONG><a name="[33]"></a>u8g2_draw_l90_r0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, u8g2_setup.o(.text.u8g2_draw_l90_r0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = u8g2_draw_l90_r0 &rArr; u8g2_draw_hv_line_2dir
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_hv_line_2dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_setup.o(.rodata.u8g2_cb_r0)
</UL>
<P><STRONG><a name="[f]"></a>u8g2_font_calc_vref_font</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_font_calc_vref_font))
<BR>[Address Reference Count : 1]<UL><LI> u8g2_font.o(.text.u8g2_SetFontPosBaseline)
</UL>
<P><STRONG><a name="[11c]"></a>u8g2_font_decode_get_unsigned_bits</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, u8g2_font.o(.text.u8g2_font_decode_get_unsigned_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_setup_decode
</UL>

<P><STRONG><a name="[10c]"></a>u8g2_font_decode_glyph</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, u8g2_font.o(.text.u8g2_font_decode_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_len
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_x
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_y
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_get_unsigned_bits
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_setup_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawGlyph
</UL>

<P><STRONG><a name="[11f]"></a>u8g2_font_decode_len</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, u8g2_font.o(.text.u8g2_font_decode_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawHVLine
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_x
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_add_vector_y
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>

<P><STRONG><a name="[10b]"></a>u8g2_font_get_glyph_data</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, u8g2_font.o(.text.u8g2_font_get_glyph_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_font_get_glyph_data
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawGlyph
</UL>

<P><STRONG><a name="[12]"></a>u8g2_ll_hvline_vertical_top_lsb</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, u8g2_ll_hvline.o(.text.u8g2_ll_hvline_vertical_top_lsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g2_ll_hvline_vertical_top_lsb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_d_setup.o(.text.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
</UL>
<P><STRONG><a name="[116]"></a>u8g2_m_16_8_f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, u8g2_d_memory.o(.text.u8g2_m_16_8_f))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
</UL>

<P><STRONG><a name="[111]"></a>u8g2_read_font_info</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, u8g2_font.o(.text.u8g2_read_font_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_read_font_info
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_word
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SetFont
</UL>

<P><STRONG><a name="[31]"></a>u8g2_update_dimension_r0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, u8g2_setup.o(.text.u8g2_update_dimension_r0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_update_dimension_r0 &rArr; u8g2_update_dimension_common
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_update_dimension_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_setup.o(.rodata.u8g2_cb_r0)
</UL>
<P><STRONG><a name="[32]"></a>u8g2_update_page_win_r0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, u8g2_setup.o(.text.u8g2_update_page_win_r0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g2_update_page_win_r0 &rArr; u8g2_apply_clip_window &rArr; u8g2_IsIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_apply_clip_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_setup.o(.rodata.u8g2_cb_r0)
</UL>
<P><STRONG><a name="[121]"></a>u8x8_DrawTile</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, u8x8_display.o(.text.u8x8_DrawTile))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8x8_DrawTile
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_send_buffer
</UL>

<P><STRONG><a name="[e5]"></a>u8x8_InitDisplay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_display.o(.text.u8x8_InitDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[110]"></a>u8x8_RefreshDisplay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_display.o(.text.u8x8_RefreshDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
</UL>

<P><STRONG><a name="[e6]"></a>u8x8_SetPowerSave</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_display.o(.text.u8x8_SetPowerSave))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::usr_main()
</UL>

<P><STRONG><a name="[115]"></a>u8x8_Setup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, u8x8_setup.o(.text.u8x8_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_Setup_ssd1306_i2c_128x64_noname_f
</UL>

<P><STRONG><a name="[185]"></a>u8x8_SetupMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_display.o(.text.u8x8_SetupMemory), UNUSED)

<P><STRONG><a name="[e]"></a>u8x8_ascii_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, u8x8_8x8.o(.text.u8x8_ascii_next))
<BR>[Address Reference Count : 1]<UL><LI> u8g2_font.o(.text.u8g2_DrawStr)
</UL>
<P><STRONG><a name="[128]"></a>u8x8_byte_EndTransfer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_byte.o(.text.u8x8_byte_EndTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
</UL>

<P><STRONG><a name="[123]"></a>u8x8_byte_SendByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, u8x8_byte.o(.text.u8x8_byte_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8x8_byte_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
</UL>

<P><STRONG><a name="[124]"></a>u8x8_byte_SendBytes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_byte.o(.text.u8x8_byte_SendBytes))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_SendByte
</UL>

<P><STRONG><a name="[129]"></a>u8x8_byte_StartTransfer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_byte.o(.text.u8x8_byte_StartTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
</UL>

<P><STRONG><a name="[131]"></a>u8x8_cad_EndTransfer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_cad.o(.text.u8x8_cad_EndTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[130]"></a>u8x8_cad_SendArg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_cad.o(.text.u8x8_cad_SendArg))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[12f]"></a>u8x8_cad_SendCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_cad.o(.text.u8x8_cad_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[126]"></a>u8x8_cad_SendData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_cad.o(.text.u8x8_cad_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
</UL>

<P><STRONG><a name="[125]"></a>u8x8_cad_SendSequence</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, u8x8_cad.o(.text.u8x8_cad_SendSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8x8_cad_SendSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[12e]"></a>u8x8_cad_StartTransfer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, u8x8_cad.o(.text.u8x8_cad_StartTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
</UL>

<P><STRONG><a name="[11]"></a>u8x8_cad_ssd13xx_fast_i2c</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, u8x8_cad.o(.text.u8x8_cad_ssd13xx_fast_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u8x8_cad_ssd13xx_fast_i2c &rArr; u8x8_i2c_data_transfer &rArr; u8x8_byte_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_i2c_data_transfer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_EndTransfer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_StartTransfer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_d_setup.o(.text.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
</UL>
<P><STRONG><a name="[12b]"></a>u8x8_d_helper_display_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, u8x8_display.o(.text.u8x8_d_helper_display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8x8_d_helper_display_init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_gpio_call
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
</UL>

<P><STRONG><a name="[12d]"></a>u8x8_d_helper_display_setup_memory</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, u8x8_display.o(.text.u8x8_d_helper_display_setup_memory))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
</UL>

<P><STRONG><a name="[10]"></a>u8x8_d_ssd1306_128x64_noname</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, u8x8_d_ssd1306_128x64_noname.o(.text.u8x8_d_ssd1306_128x64_noname))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = u8x8_d_ssd1306_128x64_noname &rArr; u8x8_d_ssd1306_sh1106_generic &rArr; u8x8_cad_SendSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_helper_display_setup_memory
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_helper_display_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_sh1106_generic
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> u8g2_d_setup.o(.text.u8g2_Setup_ssd1306_i2c_128x64_noname_f)
</UL>
<P><STRONG><a name="[127]"></a>u8x8_gpio_call</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8x8_gpio.o(.text.u8x8_gpio_call))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_helper_display_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
</UL>

<P><STRONG><a name="[11a]"></a>u8x8_utf8_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8x8_8x8.o(.text.u8x8_utf8_init))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_draw_string
</UL>

<P><STRONG><a name="[ef]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[fc]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[f3]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[13f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[f0]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[134]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[f2]"></a>vPortEnterCritical</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[f5]"></a>vPortExitCritical</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[f9]"></a>vPortFree</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, heap_3.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[8]"></a>vPortSVCHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.vPortSVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> exlib_system.o(.text._ZN5ExLib6System4initEv)
</UL>
<P><STRONG><a name="[132]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSetupTimerInterrupt &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[104]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[ca]"></a>vTaskDelete</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vTaskDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Task::~Task()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Task::begin(char const*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[13d]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[107]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[135]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[133]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[ed]"></a>vTaskStartScheduler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[36]"></a>vTaskSwitchContext</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>xPortPendSVHandler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.xPortPendSVHandler))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_system.o(.text._ZN5ExLib6System4initEv)
</UL>
<P><STRONG><a name="[137]"></a>xPortStartScheduler</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[a]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_system.o(.text._ZN5ExLib6System4initEv)
</UL>
<P><STRONG><a name="[f4]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[13b]"></a>xQueueGenericReset</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[105]"></a>xQueueReceive</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[13e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[c9]"></a>xTaskCreate</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Task::begin(char const*, unsigned int, unsigned int)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[13c]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[101]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[13a]"></a>xTaskIncrementTick</STRONG> (Thumb, 438 bytes, Stack size 36 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f8]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[fd]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[103]"></a>xTaskResumeAll</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[136]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3d]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[186]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[187]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>_GLOBAL__sub_I_ExLib_Main.cpp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, exlib_main.o(.text._GLOBAL__sub_I_ExLib_Main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _GLOBAL__sub_I_ExLib_Main.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::Task::Task(void (*)(void*), void*)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exlib_main.o(.init_array)
</UL>
<P><STRONG><a name="[35]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::I2C::I2C(ExLib::I2C_Periph)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::PWM_Channel::PWM_Channel(ExLib::PWM_Generator&, unsigned int, ExLib::GPIO_Pin)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::HardwarePWM::HardwarePWM(ExLib::HardwarePWM_Periph, ExLib::TimeInterval)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::operator"" _ms(unsigned long long)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExLib::UART::UART(ExLib::UART_Periph, ExLib::BufferFIFO&lang;char&rang;*)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[10f]"></a>u8g2_send_buffer</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, u8g2_buffer.o(.text.u8g2_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = u8g2_send_buffer &rArr; u8x8_DrawTile
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_DrawTile
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_SendBuffer
</UL>

<P><STRONG><a name="[120]"></a>u8g2_font_get_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, u8g2_font.o(.text.u8g2_font_get_word))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_get_glyph_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_read_font_info
</UL>

<P><STRONG><a name="[11b]"></a>u8g2_font_setup_decode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, u8g2_font.o(.text.u8g2_font_setup_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_font_setup_decode &rArr; u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_get_unsigned_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_font_decode_glyph
</UL>

<P><STRONG><a name="[10e]"></a>u8g2_draw_string</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, u8g2_font.o(.text.u8g2_draw_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = u8g2_draw_string &rArr; u8g2_DrawGlyph &rArr; u8g2_font_decode_glyph &rArr; u8g2_font_decode_len &rArr; u8g2_DrawHVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_utf8_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawGlyph
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_DrawStr
</UL>

<P><STRONG><a name="[122]"></a>u8g2_update_dimension_common</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, u8g2_setup.o(.text.u8g2_update_dimension_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u8g2_update_dimension_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_update_dimension_r0
</UL>

<P><STRONG><a name="[117]"></a>u8g2_apply_clip_window</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, u8g2_setup.o(.text.u8g2_apply_clip_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u8g2_apply_clip_window &rArr; u8g2_IsIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_IsIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8g2_update_page_win_r0
</UL>

<P><STRONG><a name="[12a]"></a>u8x8_i2c_data_transfer</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, u8x8_cad.o(.text.u8x8_i2c_data_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = u8x8_i2c_data_transfer &rArr; u8x8_byte_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_EndTransfer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_StartTransfer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_byte_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_ssd13xx_fast_i2c
</UL>

<P><STRONG><a name="[12c]"></a>u8x8_d_ssd1306_sh1106_generic</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, u8x8_d_ssd1306_128x64_noname.o(.text.u8x8_d_ssd1306_sh1106_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u8x8_d_ssd1306_sh1106_generic &rArr; u8x8_cad_SendSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendSequence
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_EndTransfer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_StartTransfer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendArg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_cad_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8x8_d_ssd1306_128x64_noname
</UL>

<P><STRONG><a name="[d]"></a>prvTaskExitError</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[138]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[139]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[106]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[f6]"></a>prvCopyDataToQueue</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[fb]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, queue.o(.text.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[ee]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[13]"></a>prvIdleTask</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[f1]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[14]"></a>prvTimerTask</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvTimerTask &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[100]"></a>prvSampleTimeNow</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvSampleTimeNow &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[fe]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[fa]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[ff]"></a>prvReloadTimer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timers.o(.text.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
